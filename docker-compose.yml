version: '3.8'

services:

  JAQpFront:
    image: 'jaqp_front:latest'
    build:
     context: ./JAQpFront
    container_name: JAQp-front
    deploy:
      resources:
        reservations:
          memory: 256M
    depends_on:
      - JAQpApi
    ports:
      - 3000:3000  
   
  JAQpApi:
    image: 'jaqp_api:latest'
    build:
     context: ./JAQpApi
    container_name: JAQp-api
    deploy:
      resources:
        reservations:
          memory: 256M
    depends_on:
      - JAQp-db
      - JAQp-minio
      - JAQp-Garnet
      - JAQp-elastic
    ports:
      - 8080:8080  
   
 
  JAQp-db:
    image: 'postgres:latest'
    container_name: JAQp-db
    deploy:
      resources:
        reservations:
          memory: 256M
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=JAQp
    ports:
      - "5433:5432"
    volumes:
      - pg-data:/var/lib/postgresql/data
#     - ./schema:/docker-entrypoint-initdb.d   
  JAQp-minio:
    image: minio/minio
    container_name: JAQp-minio
    deploy:
      resources:
        reservations:
          memory: 256M
    ports:
          - "9000:9000"
          - "9001:9001"
    volumes:
          - minio-data:/data
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: miniominio 
    command: server --console-address ":9001" /data
  JAQp-Garnet:
    image: 'ghcr.io/microsoft/garnet'
    restart: always
    deploy:
      resources:
        reservations:
          memory: 256M
    container_name: JAQp-Garnet
    ulimits:
      memlock: -1
    ports:
      - "6379:6379"
    # To avoid docker NAT, consider `host` mode.
    # https://docs.docker.com/compose/compose-file/compose-file-v3/#network_mode
    # network_mode: "host"
    volumes:
      - cache:/data


  JAQp-elastic:
    image: elasticsearch:8.10.4
    container_name: JAQp-elastic
    deploy:
      resources:
        reservations:
          memory: 256M
    environment:
      - discovery.type=single-node
      - node.name=JAQp-elastic
      - discovery.seed_hosts=JAQp-elastic
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms128m -Xmx128m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9600:9600"
  JAQp-kibana:
    image: kibana:8.10.4
    container_name: JAQp-kibana
    deploy:
      resources:
        reservations:
          memory: 256M
    ports:
       - "5601:5601"
    expose:
      - "5601"
    environment:
      ELASTICSEARCH_URL: http://JAQp-elastic:9200
      ELASTICSEARCH_HOSTS: http://JAQp-elastic:9200
      
  JAQp-logstash:
    user: root
    image: logstash:8.10.4
    container_name: JAQp-logstash    
    deploy:
      resources:
        reservations:
          memory: 256M
    ports:
      - "5044:5044"
    depends_on:
      - JAQp-db
      - JAQp-elastic
    environment:
      - PIPELINE_WORKERS=1
      - PIPELINE_BATCH_SIZE=125
      - PIPELINE_BATCH_DELAY=50
      - "ES_JAVA_OPTS=-Xms128m -Xmx128m"
    volumes:
      - ./conf/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - logstash_data:/usr/share/logstash/data
      - ./conf/postgresql-42.6.0.jar:/usr/share/logstash/postgresql-42.6.0.jar
volumes:
  cache:
  pg-data:
  minio-data:
  elasticsearch_data:
  logstash_data:
